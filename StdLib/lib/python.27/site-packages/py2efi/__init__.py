"""
builds UEFI executables from Python scripts

New keywords for distutils' setup function specify what to build:

    console
        list of scripts to convert into console exes

    zipfile
        name of shared zipfile to generate, may specify a subdirectory,
        defaults to 'library.zip'


py2efi options, to be specified in the options keyword to the setup function:

    unbuffered - if true, use unbuffered binary stdout and stderr
    optimize - string or int (0, 1, or 2)

    includes - list of module names to include
    packages - list of packages to include with subpackages
    ignores - list of modules to ignore if they are not found
    excludes - list of module names to exclude

    dist_dir - directory where to build the final files

Items in the console list can also be
dictionaries to further customize the build process.  The following
keys in the dictionary are recognized, most are optional:

    script (EFI) - list of python scripts (required)
    dest_base - directory and basename for the executable
                if a directory is contained, must be the same for all targets
"""
# py2efi/__init__.py

# 'import py2efi' imports this package, and two magic things happen:
#
# - the 'py2efi.build_exe' submodule is imported and installed as
#   'distutils.commands.py2efi' command
#
# - the default distutils Distribution class is replaced by the
# special one contained in this module.
#

__version__ = "0.6.9"

import distutils.dist, distutils.core, distutils.command, build_efi, sys

class Distribution(distutils.dist.Distribution):

    def __init__(self, attrs):
        self.console = attrs.pop("console", [])
        self.zipfile = attrs.pop("zipfile", "library.zip")

        distutils.dist.Distribution.__init__(self, attrs)

distutils.core.Distribution = Distribution

distutils.command.__all__.append('py2efi')

sys.modules['distutils.command.py2efi'] = build_efi
