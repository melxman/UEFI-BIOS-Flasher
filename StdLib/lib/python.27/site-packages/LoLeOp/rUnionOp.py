#
# rUnionOp.py
#
# Copyright (C) 2017 efipy.core@gmail.com All rights reserved.
#
# rUnionOp.py is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# rUnionOp.py is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

import EfiPy as e
import BitOp as b

#
# Generic register declare
#
class COMMON_REG_32BITS_Bits (e.Structure):
  _fields_ = [
    ("Reserved",  e.UINT32, 32),
  ]

class COMMON_REG_32BITS (e.Union):
  _fields_ = [
    ("Bits",      COMMON_REG_32BITS_Bits),
    ("Uint32",    e.UINT32)
  ]

class COMMON_REG_32BITS_OUTPUT (e.Structure):
  _fields_ = [
    ('EAX',  COMMON_REG_32BITS),
    ('EBX',  COMMON_REG_32BITS),
    ('ECX',  COMMON_REG_32BITS),
    ('EDX',  COMMON_REG_32BITS)
  ]

#
# register operation uage
#

from BitOp import _MemCell, _MemArray

rUnionOpChache = {}

#
# _MemCell Operation
# Name:     class name
# Index:    Index from MemArray base
# <<--- CellType: Cell class (default: _MemCell) --->>
# Start:    start bit in memory cell
# Width:    bit number used in this object, eg cell[3:5], Start = 3, Width = 3
# mWidth:   total bit number for _MemCell
# MemSet:   Memory set function
# MemGet:   Memory get function
# **CellExt: {
#             CellUnion:  Cell union type, eg, COMMON_REG_32BITS
#             CellType:   Cell raw data type key, eg, "Uint32"
#             CellBits:   Cell structured data key , eg "Bits"
#           }
#
class rUnionOp (_MemCell):

  def __init__ (self, Name, Index, Start, Width, mWidth, **CellExt):

    CellExt["CellBase"] = CellExt.get ("CellBase", lambda X: X)
    super(rUnionOp, self).__init__(Name, Index, Start, Width, mWidth, **CellExt)
    object.__setattr__ (self, "CellType",   CellExt.get ("CellType", None))
    object.__setattr__ (self, "CellUnion",  CellExt.get ("CellUnion", None))
    object.__setattr__ (self, "CellBits",   CellExt.get ("CellBits", None))
    object.__setattr__ (self, "CellBase",   CellExt.get ("CellBase", lambda X: X))

    # try:
    #   # self.KeyObj = rUnionOpChache [(Name, CellType)]
    #   object.__setattr__ (self, "KeyObj", rUnionOpChache [(Name, self.CellUnion)])
    # except:
    object.__setattr__ (self, "KeyObj", self.CellUnion ())
    # rUnionOpChache [(Name, self.CellUnion)] = self.KeyObj

    Value = self.CellExt.get ('Value', 0)

    # Example EAX.Uint32.Value
    if self.CellUnion != None:
      for i in self.KeyObj._fields_:
        if i[0] == self.CellType:
          setattr (self.KeyObj, self.CellType, Value)

  def MemGet (self, Key):
    CellType = getattr (self.KeyObj, self.CellType)
    return CellType

  def MemSet (self, Key, Value):
    self.KeyObj.__setattr__ (self.CellType, Value)

  def __setattr__ (self, name, value):
    try:
      print "__setattr__: ", name, value
      _Bits = self.KeyObj.__getattribute__ (self.CellBits)
      NameArray = [i[0] for i in _Bits._fields_]
      if name in NameArray:
        _Bits.__setattr__ (name, value)
      else:
        raise
    except:
      setattr (self, name, value)

  def __getattr__ (self, name):
    try:
        _Bits = self.KeyObj.__getattribute__ (self.CellBits)
        ret = _Bits.__getattribute__ (name)
        return ret
    except:
      return self.__getattribute__ (name)
