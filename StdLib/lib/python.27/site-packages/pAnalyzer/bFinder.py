#
# bFinder.py
#
# Copyright (C) 2017 efipy.core@gmail.com All rights reserved.
#
# bFinder.py is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# EfiPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

import EfiPy as e
import Panalyzer as p

import EfiPy.MdePkg.Protocol.DevicePath as DevP
from EfiPy.MdePkg.Protocol.DevicePathToText import gEfiDevicePathToTextProtocolGuid, EFI_DEVICE_PATH_TO_TEXT_PROTOCOL
from EfiPy.MdePkg.Protocol.DriverBinding import gEfiDriverBindingProtocolGuid, EFI_DRIVER_BINDING_PROTOCOL
from EfiPy.MdePkg.Protocol.LoadedImage import gEfiLoadedImageProtocolGuid, EFI_LOADED_IMAGE_PROTOCOL

CopyRight = "Binding driver Finder"

#
# dOut class override
#

class bOutClass (p.dOutClass):

  def __init__ (self, fName = None, msg = None):

    p.dOutClass.__init__ (self, fName, msg)
    self.ExtraOut(CopyRight)

  def append (self, msg):
    pass

#
# bFinder class for finding binding driver
# which supported function return EFI_SUCCESS
#
class bFinder:

  #
  # class __init__ function
  #
  def __init__ (self, DevPathName, OutFile = None):

    self.dOut = bOutClass(OutFile)

    # Locate EFI_DEVICE_PATH_TO_TEXT_PROTOCOL protocol

    Interface = e.PVOID()
    Status = e.gBS.LocateProtocol(
               e.byref(gEfiDevicePathToTextProtocolGuid),
               None,
               Interface
               )
    if e.EFI_ERROR (Status):
      self.dOut.ExtraOut ("Locate EFI_DEVICE_PATH_TO_TEXT_PROTOCOL Protocol Error # (Status:%x)\n" % Status)
      self.dOut.terminate ()
      exit(0)

    self.DevPathToText = e.cast (
                           Interface,
                           e.POINTER(EFI_DEVICE_PATH_TO_TEXT_PROTOCOL)
                           )[0]

  #
  # bFinder default connect function (Virtual)
  #
  def DevConnect (self):
    pass

  #
  # finding function
  #
  def finding (self):

    # pAnalyzer filter need pathTotP 
    pathTotP = self.DevPathToText 

    #
    # filter function
    # args[0]: EFI_DRIVER_BINDING_SUPPORTED() return values, EFI_STATUS
    # args[1]: IN EFI_DRIVER_BINDING_PROTOCOL *This,
    # args[2]: IN EFI_HANDLE                  ControllerHandle
    # args[3]: IN EFI_DEVICE_PATH_PROTOCOL    *RemainingDevicePath OPTIONAL
    #
    def _filter_func (dOut, *args):

      if args[0] != 0x00:
        return None, args

      bProtocol = e.cast (args[1], e.POINTER(EFI_DRIVER_BINDING_PROTOCOL))
      TheHandle = bProtocol[0].DriverBindingHandle
      TempV = e.PVOID();

      Status = e.gBS.OpenProtocol (
                     TheHandle,
                     e.byref(gEfiLoadedImageProtocolGuid),
                     e.byref(TempV),
                     e.gImageHandle,
                     None,
                     e.EFI_OPEN_PROTOCOL_GET_PROTOCOL
                     )
      if e.EFI_ERROR (Status):
        return None, args

      LoadedImage = e.cast (TempV, e.POINTER(EFI_LOADED_IMAGE_PROTOCOL))

      e.gBS.CloseProtocol(
                TheHandle,
                e.byref(gEfiLoadedImageProtocolGuid),
                e.gImageHandle,
                None)

      if e.EFI_ERROR (Status):
        return None, args

      dOut.ExtraOut ("EFI_DRIVER_BINDING_PROTOCOL::Supported() return EFI_SUCCESS by\n")

      #
      # Output Image File Name
      #
      TempDevPathName = pathTotP.ConvertDevicePathToText (LoadedImage[0].FilePath, 0, 0)
      dOut.ExtraOut ("   Image File:          " + TempDevPathName + "\n")

      #
      # Output Parent device path name
      #
      TempDevPath    = args[2]

      TempV = e.PVOID();
      Status = e.gBS.OpenProtocol (
                     args[2],
                     e.byref(DevP.gEfiDevicePathProtocolGuid),
                     e.byref(TempV),
                     args[1][0].DriverBindingHandle,
                     args[2],
                     e.EFI_OPEN_PROTOCOL_GET_PROTOCOL
                     )
      if e.EFI_ERROR (Status):
        TempDevPathName = "NULL"
      else:
        TempDevPath = e.cast (TempV, e.POINTER(DevP.EFI_DEVICE_PATH_PROTOCOL))
        TempDevPathName = pathTotP.ConvertDevicePathToText (TempDevPath, 0, 0)
        Status = e.gBS.CloseProtocol (
          args[2],
          e.byref(DevP.gEfiDevicePathProtocolGuid),
          args[1][0].DriverBindingHandle,
          args[2],
          );

      dOut.ExtraOut ("   ParentDevicePath:    " + TempDevPathName + "\n")

      #
      # Output remaining device path name
      #
      TempDevPath = args[3]
      TempDevPathName = pathTotP.ConvertDevicePathToText (TempDevPath, 0, 0)
      if TempDevPathName == None:
        TempDevPathName = "NULL"
      dOut.ExtraOut ("   RemainingDevicePath: " + TempDevPathName + "\n")

      return None, args


    #
    # finding function
    # It run the procecdure fo pAnalyzer
    #

    self.dOut.section("Prepare")

    t = p.pAnalyzer(self.dOut)

    t.Build_Capability (EFI_DRIVER_BINDING_PROTOCOL)
    t.Detect_Protocol (gEfiDriverBindingProtocolGuid, EFI_DRIVER_BINDING_PROTOCOL)
  
    for target, handle in t.Target:
      t.Filter.append (t.Build_Filter (target, handle))
  
    t.install("Supported", None, _filter_func)
    t.install("Start")
    t.start("Supported")
    t.start("Start")

    self.dOut.section("Testing_1")

    # ConnectController
    self.DevConnect ()
    # self._ConnectPciRootBridge()

    del (t)

    self.dOut.terminate ()

#
# Test code
#
if __name__ == '__main__':

  DevPathText = u"PciRoot(0x0)/Pci(0x1,0x0)/Serial(0x1)"
  # DevPathText = u"PciRoot(0x0)/Pci(0x1C,0x5)/Pci(0x0,0x0)/MAC(F8CAB849A037,0x0)/VenHw(D8944553-C4DD-41F4-9B30-E1397CFB267B)"
  # DevPathText = u"PciRoot(0x0)/Pci(0x17,0x0)/Sata(0x0,0xFFFF,0x0)"

  finder = bFinder (DevPathText)
  finder.finding ()
