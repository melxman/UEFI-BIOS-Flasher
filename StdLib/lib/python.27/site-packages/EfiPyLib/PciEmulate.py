#
# PciEmulate.py
#
# Copyright (C) 2018 efipy.core@gmail.com All rights reserved.
#
# PciEmulate.py is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# PciEmulate.py is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from LoLeOp.Io import Io8, Io16, Io32
import EfiPy.MdePkg.IndustryStandard.Pci as pci

def _PciIoR32 (Bus, Dev, Func, Reg):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  return int (Io32[0xCFC])

def _PciIoW32 (Bus, Dev, Func, Reg, Val):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  Io32[0xCFC] = Val

def _PciIoR16 (Bus, Dev, Func, Reg):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  return int (Io16[0xCFC + (Reg & 2)])

def _PciIoW16 (Bus, Dev, Func, Reg, Val):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  Io16[0xCFC + (Reg & 2)] = Val

def _PciIoR8 (Bus, Dev, Func, Reg):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  return int (Io8[0xCFC + (Reg & 3)])

def _PciIoW8 (Bus, Dev, Func, Reg, Val):

  reg   = pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1))
  Io32[0xCF8] = reg.Uint32
  Io8[0xCFC+ (Reg & 3)]  = Val

def PciEmulate ():

  _p = pci.PCI_TYPE00 ()
  _r = []

  for Bus in range (pci.PCI_MAX_BUS + 1):
    for Dev in range (pci.PCI_MAX_DEVICE + 1):
      for Func in range (pci.PCI_MAX_FUNC + 1):

        _p.Hdr.VendorId = _PciIoR16 (Bus, Dev, Func, 0x00)

        if _p.Hdr.VendorId == 0xFFFF and Func == 0:
          break
        if _p.Hdr.VendorId == 0xFFFF:
          continue

        # _classcode = _PciIoR32 (Bus, Dev, Func, 0x08)
        # if _classcode == 0xFFFFFFFF:
        #   continue

        _r.append ((Bus, Dev, Func))

        _p.Hdr.HeaderType = _PciIoR8 (Bus, Dev, Func, 0x0E)
        if Func == 0 and not pci.IS_PCI_MULTI_FUNC (_p):
          break

  return _r
