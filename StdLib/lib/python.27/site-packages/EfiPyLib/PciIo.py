#
# PciIo.py
#
# Copyright (C) 2018 efipy.core@gmail.com All rights reserved.
#
# PciIo.py is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# PciIo.py is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from PciStructure import PciHeaderS
import EfiPy.MdePkg.IndustryStandard.Pci as pci
from LoLeOp.Io import Io8, Io16, Io32
from LoLeOp.Mem   import _Mem8, _Mem16, _Mem32
from LoLeOp.BitOp import _MemArray, _MemCell

PciIo32Cache = {}
PciIo16Cache = {}
PciIo8Cache = {}

try:
  from EfiPyLib.Acpi.AcpiMcfg import Table as McfgTable
  PciMmioBase = McfgTable.McfgEntry[0].BaseAddress
except:
  PciMmioBase = 0

PciIoCellExt = {
    # "CellUnion": EFIPY_MSR_COMMON_Reg,
    "CellDefault": None,
    "CellArray": {},
    "CellType":  None,
    "CellBits":  None,
    "CellBase":  lambda X: X
  }

class _PciIo8Cell (_MemCell):
  def MemSet (self, index, value):
    Io32[0xCF8] = index
    Io8[0xCFC + (index & 3)] = value
  def MemGet (self, index):
    Io32[0xCF8] = index
    return int (Io8[0xCFC + (index & 3)])

class _PciIo16Cell (_MemCell):
  def MemSet (self, index, value):
    Io32[0xCF8] = index
    Io16[0xCFC + (index & 2)] = value
  def MemGet (self, index):
    Io32[0xCF8] = index
    return int (Io16[0xCFC + (index & 2)])

class _PciIo32Cell (_MemCell):
  def MemSet (self, index, value):
    Io32[0xCF8] = index
    Io32[0xCFC] = value
  def MemGet (self, index):
    Io32[0xCF8] = index
    return int (Io32[0xCFC])

def PciIo8 (Bus, Dev, Func):

  try:
    return PciIo8Cache[(Bus, Dev, Func)]
  except:
    pass

  if PciMmioBase != 0:
    PciIoCellExt["CellBase"] = lambda Reg: PciMmioBase + (Bus << 20) + (Dev << 15) + (Func << 12) + Reg
    PciIo8CellClass            = _Mem8
  else:
    PciIoCellExt["CellBase"] = lambda Reg: pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1)).Uint32
    PciIo8CellClass            = _PciIo8Cell

  _PciIo8Obj = _MemArray ("PciIo8(%02X:%02X:%02X)" % (Bus, Dev, Func),   8,  CellClass = PciIo8CellClass, CellExt = PciIoCellExt)
  PciIo8Cache[(Bus, Dev, Func)] = _PciIo8Obj
  return _PciIo8Obj

def PciIo16 (Bus, Dev, Func):

  try:
    return PciIo16Cache[(Bus, Dev, Func)]
  except:
    pass

  if PciMmioBase != 0:
    PciIoCellExt["CellBase"] = lambda Reg: PciMmioBase + (Bus << 20) + (Dev << 15) + (Func << 12) + Reg
    PciIo16CellClass            = _Mem16
  else:
    PciIoCellExt["CellBase"] = lambda Reg: pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1)).Uint32
    PciIo16CellClass            = _PciIo16Cell

  _PciIo16Obj = _MemArray ("PciIo16(%02X:%02X:%02X)" % (Bus, Dev, Func),   16,  CellClass = PciIo16CellClass, CellExt = PciIoCellExt)
  PciIo16Cache[(Bus, Dev, Func)] = _PciIo16Obj
  return _PciIo16Obj

def PciIo32 (Bus, Dev, Func):

  try:
    return PciIo32Cache[(Bus, Dev, Func)]
  except:
    pass

  if PciMmioBase != 0:
    PciIoCellExt["CellBase"] = lambda Reg: PciMmioBase + (Bus << 20) + (Dev << 15) + (Func << 12) + Reg
    PciIo32CellClass            = _Mem32
  else:
    PciIoCellExt["CellBase"] = lambda Reg: pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1)).Uint32
    PciIo32CellClass            = _PciIo32Cell

  _PciIo32Obj = _MemArray ("PciIo32(%02X:%02X:%02X)" % (Bus, Dev, Func),   32,  CellClass = PciIo32CellClass, CellExt = PciIoCellExt, DictKey = PciHeaderS)
  PciIo32Cache[(Bus, Dev, Func)] = _PciIo32Obj
  return _PciIo32Obj

PciIoConfigAddress  = lambda Bus, Dev, Func, Reg: pci.PCI_CONFIG_ACCESS_CF8((Reg, Func, Dev, Bus, 0, 1)).Uint32
PciMmioConfigOffset = lambda Bus, Dev, Func, Reg: (Bus << 20) + (Dev << 15) + (Func << 12) + Reg