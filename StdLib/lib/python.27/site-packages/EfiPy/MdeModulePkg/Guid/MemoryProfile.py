#
# MemoryProfile.py
#
# Copyright (C) 2016-2017 efipy.core@gmail.com All rights reserved.
#
# MemoryProfile.py is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# EfiPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from EfiPy  import *
from EfiPy.MdePkg.Protocol.FirmwareVolume2 import EFI_FV_FILETYPE

class MEMORY_PROFILE_COMMON_HEADER (Structure):
  _fields_ = [
  ("Signature", UINT32),
  ("Length",    UINT16),
  ("Revision",  UINT16)
  ]

MEMORY_PROFILE_CONTEXT_SIGNATURE = SIGNATURE_32 ('M','P','C','T')
MEMORY_PROFILE_CONTEXT_REVISION  = 0x0002

class MEMORY_PROFILE_CONTEXT (Structure):
  _fields_ = [
  ("Header",                    MEMORY_PROFILE_COMMON_HEADER),
  ("CurrentTotalUsage",         UINT64),
  ("PeakTotalUsage",            UINT64),
  ("CurrentTotalUsageByType",   UINT64 * (EfiMaxMemoryType + 2)),
  ("PeakTotalUsageByType",      UINT64 * (EfiMaxMemoryType + 2)),
  ("TotalImageSize",            UINT64),
  ("ImageCount",                UINT32),
  ("SequenceCount",             UINT32)
  ]

MEMORY_PROFILE_DRIVER_INFO_SIGNATURE = SIGNATURE_32 ('M','P','D','I')
MEMORY_PROFILE_DRIVER_INFO_REVISION  = 0x0003

class MEMORY_PROFILE_DRIVER_INFO (Structure):
  _fields_ = [
  ("Header",              MEMORY_PROFILE_COMMON_HEADER),
  ("FileName",            EFI_GUID),
  ("ImageBase",           PHYSICAL_ADDRESS),
  ("ImageSize",           UINT64),
  ("EntryPoint",          PHYSICAL_ADDRESS),
  ("ImageSubsystem",      UINT16),
  ("FileType",            EFI_FV_FILETYPE),
  ("Reserved",            UINT8 * 1),
  ("AllocRecordCount",    UINT32),
  ("CurrentUsage",        UINT64),
  ("PeakUsage",           UINT64),
  ("CurrentUsageByType",  UINT64 * (EfiMaxMemoryType + 2)),
  ("PeakUsageByType",     UINT64 * (EfiMaxMemoryType + 2)),
  ("PdbStringOffset",     UINT16),
  ("Reserved2",           UINT8 * 6),
  # ("PdbString", CHAR8 * N),
  ]

MemoryProfileActionAllocatePages = 1
MemoryProfileActionFreePages = 2
MemoryProfileActionAllocatePool = 3
MemoryProfileActionFreePool = 4
MEMORY_PROFILE_ACTION = UINTN

MEMORY_PROFILE_ACTION_EXTENSION_MASK               = 0xFFF0
MEMORY_PROFILE_ACTION_EXTENSION_LIB_MASK           = 0x8000
MEMORY_PROFILE_ACTION_EXTENSION_REALLOC_MASK       = 0x0200
MEMORY_PROFILE_ACTION_EXTENSION_COPY_MASK          = 0x0100
MEMORY_PROFILE_ACTION_EXTENSION_ZERO_MASK          = 0x0080
MEMORY_PROFILE_ACTION_EXTENSION_ALIGN_MASK         = 0x0040
MEMORY_PROFILE_ACTION_EXTENSION_MEM_TYPE_MASK      = 0x0030
MEMORY_PROFILE_ACTION_EXTENSION_MEM_TYPE_BASIC     = 0x0000
MEMORY_PROFILE_ACTION_EXTENSION_MEM_TYPE_RUNTIME   = 0x0010
MEMORY_PROFILE_ACTION_EXTENSION_MEM_TYPE_RESERVED  = 0x0020

MEMORY_PROFILE_ACTION_LIB_ALLOCATE_PAGES                    = 0x8001
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RUNTIME_PAGES            = 0x8011
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RESERVED_PAGES           = 0x8021
MEMORY_PROFILE_ACTION_LIB_FREE_PAGES                        = 0x8002
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_ALIGNED_PAGES            = 0x8041
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_ALIGNED_RUNTIME_PAGES    = 0x8051
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_ALIGNED_RESERVED_PAGES   = 0x8061
MEMORY_PROFILE_ACTION_LIB_FREE_ALIGNED_PAGES                = 0x8042
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_POOL                     = 0x8003
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RUNTIME_POOL             = 0x8013
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RESERVED_POOL            = 0x8023
MEMORY_PROFILE_ACTION_LIB_FREE_POOL                         = 0x8004
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_ZERO_POOL                = 0x8083
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RUNTIME_ZERO_POOL        = 0x8093
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RESERVED_ZERO_POOL       = 0x80a3
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_COPY_POOL                = 0x8103
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RUNTIME_COPY_POOL        = 0x8113
MEMORY_PROFILE_ACTION_LIB_ALLOCATE_RESERVED_COPY_POOL       = 0x8123
MEMORY_PROFILE_ACTION_LIB_REALLOCATE_POOL                   = 0x8203
MEMORY_PROFILE_ACTION_LIB_REALLOCATE_RUNTIME_POOL           = 0x8213
MEMORY_PROFILE_ACTION_LIB_REALLOCATE_RESERVED_POOL          = 0x8223

MEMORY_PROFILE_ALLOC_INFO_SIGNATURE = SIGNATURE_32 ('M','P','A','I')
MEMORY_PROFILE_ALLOC_INFO_REVISION  = 0x0002
class MEMORY_PROFILE_ALLOC_INFO (Structure):
  _fields_ = [
  ("Header",              MEMORY_PROFILE_COMMON_HEADER),
  ("CallerAddress",       PHYSICAL_ADDRESS),
  ("SequenceId",          UINT32),
  ("Reserved",            UINT8 * 2),
  ("ActionStringOffset",  UINT16),
  ("Action",              MEMORY_PROFILE_ACTION),
  ("MemoryType",          EFI_MEMORY_TYPE),
  ("Buffer",              PHYSICAL_ADDRESS),
  ("Size",                UINT64),
  # ("ActionString",      CHAR8 * N),
  ]

MEMORY_PROFILE_DESCRIPTOR_SIGNATURE = SIGNATURE_32 ('M','P','D','R')
MEMORY_PROFILE_DESCRIPTOR_REVISION  = 0x0001

class MEMORY_PROFILE_DESCRIPTOR (Structure):
  _fields_ = [
  ("Header",    MEMORY_PROFILE_COMMON_HEADER),
  ("Address",   PHYSICAL_ADDRESS),
  ("Size",      UINT64)
  ]

MEMORY_PROFILE_FREE_MEMORY_SIGNATURE  = SIGNATURE_32 ('M','P','R','M')
MEMORY_PROFILE_FREE_MEMORY_REVISION   = 0x0001

class MEMORY_PROFILE_DESCRIPTOR (Structure):
  _fields_ = [
  ("Header",                MEMORY_PROFILE_COMMON_HEADER),
  ("TotalFreeMemoryPages",  UINT64),
  ("FreeMemoryEntryCount",  UINT32),
  ("Reserved",              UINT8 * 4)
  # ("MemoryDescriptor",    MEMORY_PROFILE_DESCRIPTOR * FreeMemoryEntryCount)
  ]

MEMORY_PROFILE_MEMORY_RANGE_SIGNATURE = SIGNATURE_32 ('M','P','M','R')
MEMORY_PROFILE_MEMORY_RANGE_REVISION  = 0x0001

class MEMORY_PROFILE_DESCRIPTOR (Structure):
  _fields_ = [
  ("Header",                MEMORY_PROFILE_COMMON_HEADER),
  ("MemoryRangeCount",      UINT32),
  ("Reserved",              UINT8 * 4)
  # ("MemoryDescriptor",    MEMORY_PROFILE_DESCRIPTOR * MemoryRangeCount)
  ]

class EDKII_MEMORY_PROFILE_PROTOCOL (Structure):
  pass

EDKII_MEMORY_PROFILE_GET_DATA = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN     *This,
  UINT64,                                   # IN OUT *ProfileSize
  PVOID                                     #    OUT *ProfileBuffer
  )

EDKII_MEMORY_PROFILE_REGISTER_IMAGE = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN *This,
  POINTER(EFI_DEVICE_PATH_PROTOCOL),        # IN *FilePath,
  PHYSICAL_ADDRESS,                         # IN ImageBase,
  UINT64,                                   # IN ImageSize,
  EFI_FV_FILETYPE                           # IN FileType
  )

EDKII_MEMORY_PROFILE_UNREGISTER_IMAGE = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN *This,
  POINTER(EFI_DEVICE_PATH_PROTOCOL),        # IN *FilePath,
  PHYSICAL_ADDRESS,                         # IN ImageBase,
  UINT64                                    # IN ImageSize
  )

MEMORY_PROFILE_RECORDING_ENABLE     = True
MEMORY_PROFILE_RECORDING_DISABLE    = False

EDKII_MEMORY_PROFILE_GET_RECORDING_STATE = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN  *This,
  POINTER(BOOLEAN)                          # OUT *RecordingState
  )

EDKII_MEMORY_PROFILE_SET_RECORDING_STATE = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN *This,
  BOOLEAN                                   # IN RecordingState
  )

EDKII_MEMORY_PROFILE_RECORD = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EDKII_MEMORY_PROFILE_PROTOCOL),   # IN *This,
  PHYSICAL_ADDRESS,                         # IN CallerAddress,
  MEMORY_PROFILE_ACTION,                    # IN Action,
  EFI_MEMORY_TYPE,                          # IN MemoryType,
  PVOID,                                    # IN *Buffer,
  UINTN,                                    # IN Size,
  POINTER(CHAR8),                           # IN *ActionString OPTIONAL
  )

EDKII_MEMORY_PROFILE_PROTOCOL._fields_ = [
  ("GetData",           EDKII_MEMORY_PROFILE_GET_DATA),
  ("RegisterImage",     EDKII_MEMORY_PROFILE_REGISTER_IMAGE),
  ("UnregisterImage",   EDKII_MEMORY_PROFILE_UNREGISTER_IMAGE),
  ("GetRecordingState", EDKII_MEMORY_PROFILE_GET_RECORDING_STATE),
  ("SetRecordingState", EDKII_MEMORY_PROFILE_SET_RECORDING_STATE),
  ("Record",            EDKII_MEMORY_PROFILE_RECORD),
  ]

SMRAM_PROFILE_COMMAND_GET_PROFILE_INFO         = 0x1
SMRAM_PROFILE_COMMAND_GET_PROFILE_DATA         = 0x2

SMRAM_PROFILE_COMMAND_REGISTER_IMAGE           = 0x3
SMRAM_PROFILE_COMMAND_UNREGISTER_IMAGE         = 0x4

SMRAM_PROFILE_COMMAND_GET_PROFILE_DATA_BY_OFFSET = 0x5
SMRAM_PROFILE_COMMAND_GET_RECORDING_STATE        = 0x6
SMRAM_PROFILE_COMMAND_SET_RECORDING_STATE        = 0x7

class SMRAM_PROFILE_PARAMETER_HEADER (Structure):
  _fields_ = [
  ("Command",       UINT32),
  ("DataLength",    UINT32),
  ("ReturnStatus",  UINT64)
  ]

class SMRAM_PROFILE_PARAMETER_GET_PROFILE_INFO (Structure):
  _fields_ = [
  ("Header",      SMRAM_PROFILE_PARAMETER_HEADER),
  ("ProfileSize", UINT64)
  ]

class SMRAM_PROFILE_PARAMETER_GET_PROFILE_DATA (Structure):
  _fields_ = [
  ("Header",        SMRAM_PROFILE_PARAMETER_HEADER),
  ("ProfileSize",   UINT64),
  ("ProfileBuffer", PHYSICAL_ADDRESS)
  ]

class SMRAM_PROFILE_PARAMETER_GET_PROFILE_DATA_BY_OFFSET (Structure):
  _fields_ = [
  ("Header",          SMRAM_PROFILE_PARAMETER_HEADER),
  ("ProfileSize",     UINT64),
  ("ProfileBuffer",   PHYSICAL_ADDRESS),
  ("ProfileOffset",   UINT64),
  ]

class SMRAM_PROFILE_PARAMETER_RECORDING_STATE (Structure):
  _fields_ = [
  ("Header",          SMRAM_PROFILE_PARAMETER_HEADER),
  ("RecordingState",  BOOLEAN),
  ]

class SMRAM_PROFILE_PARAMETER_REGISTER_IMAGE (Structure):
  _fields_ = [
  ("Header",        SMRAM_PROFILE_PARAMETER_HEADER),
  ("FileName",      EFI_GUID),
  ("ImageBuffer",   PHYSICAL_ADDRESS),
  ("NumberOfPage",  UINT64)
  ]

class SMRAM_PROFILE_PARAMETER_UNREGISTER_IMAGE (Structure):
  _fields_ = [
  ("Header",        SMRAM_PROFILE_PARAMETER_HEADER),
  ("FileName",      EFI_GUID),
  ("ImageBuffer",   PHYSICAL_ADDRESS),
  ("NumberOfPage",  UINT64)
  ]

gEdkiiMemoryProfileGuid         = \
  EFI_GUID (0x821c9a09, 0x541a, 0x40f6, (0x9f, 0x43, 0xa, 0xd1, 0x93, 0xa1, 0x2c, 0xfe))

gEdkiiSmmMemoryProfileGuid      = \
  EFI_GUID (0xe22bbcca, 0x516a, 0x46a8, (0x80, 0xe2, 0x67, 0x45, 0xe8, 0x36, 0x93, 0xbd))

