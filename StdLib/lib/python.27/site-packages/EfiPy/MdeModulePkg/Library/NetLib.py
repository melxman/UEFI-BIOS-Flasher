# NetLib.py
#
# Copyright (C) 2017 efipy.core@gmail.com All rights reserved.
#
# NetLib.py is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# EfiPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from EfiPy  import *

from EfiPy.MdePkg.Protocol.Ip6 import EFI_IP6_HEADER
IP4_ADDR    = UINT32
TCP_SEQNO   = UINT32
TCP_PORTNO  = UINT16

NET_ETHER_ADDR_LEN    = 6
NET_IFTYPE_ETHERNET   = 0x01
 
NET_VLAN_TAG_LEN      = 4
ETHER_TYPE_VLAN       = 0x8100
EFI_IP_PROTO_UDP      = 0x11
EFI_IP_PROTO_TCP      = 0x06
EFI_IP_PROTO_ICMP     = 0x01
IP4_PROTO_IGMP        = 0x02
IP6_ICMP              = 58
DNS_MAX_NAME_SIZE     = 255
DNS_MAX_MESSAGE_SIZE  = 512

IP4_ADDR_CLASSA       = 1
IP4_ADDR_CLASSB       = 2
IP4_ADDR_CLASSC       = 3
IP4_ADDR_CLASSD       = 4
IP4_ADDR_CLASSE       = 5

IP4_MASK_NUM          = 33
IP6_PREFIX_NUM        = 129

IP4_MASK_MAX          = 32 
IP6_PREFIX_MAX        = 128

IP6_HOP_BY_HOP        = 0
IP6_DESTINATION       = 60
IP6_ROUTING           = 43
IP6_FRAGMENT          = 44
IP6_AH                = 51
IP6_ESP               = 50
IP6_NO_NEXT_HEADER    = 59

IP_VERSION_4          = 4
IP_VERSION_6          = 6

IP6_PREFIX_LENGTH     = 64

DNS_TYPE_A            = 1
DNS_TYPE_NS           = 2
DNS_TYPE_CNAME        = 5
DNS_TYPE_SOA          = 6
DNS_TYPE_WKS          = 11
DNS_TYPE_PTR          = 12
DNS_TYPE_HINFO        = 13
DNS_TYPE_MINFO        = 14
DNS_TYPE_MX           = 15
DNS_TYPE_TXT          = 16
DNS_TYPE_AAAA         = 28
DNS_TYPE_SRV_RR       = 33
DNS_TYPE_AXFR         = 252
DNS_TYPE_MAILB        = 253
DNS_TYPE_ANY          = 255

DNS_CLASS_INET        = 1
DNS_CLASS_CH          = 3
DNS_CLASS_HS          = 4
DNS_CLASS_ANY         = 255

class ETHER_HEAD (Union):
  _pack_   = 1
  _fields_ = [
  ("DstMac",    UINT8 * NET_ETHER_ADDR_LEN),
  ("SrcMac",    UINT8 * NET_ETHER_ADDR_LEN),
  ("EtherType", UINT16),
  ]

class VLAN_TCI_Bits (Structure):
  _pack_   = 1
  _fields_ = [
  ("Vid",       UINT16, 12),
  ("Cfi",       UINT16, 1),
  ("Priority",  UINT16, 3),
  ]

class VLAN_TCI (Union):
  _pack_   = 1
  _fields_ = [
  ("Bits",    VLAN_TCI_Bits),
  ("Uint16",  UINT16),
  ]

class IP4_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("HeadLen",   UINT8, 4),
  ("Ver",       UINT8, 4),
  ("Tos",       UINT8),
  ("TotalLen",  UINT16),
  ("Id",        UINT16),
  ("Fragment",  UINT16),
  ("Ttl",       UINT8),
  ("Protocol",  UINT8),
  ("Checksum",  UINT16),
  ("Src",       IP4_ADDR),
  ("Dst",       IP4_ADDR),
  ]

class IP4_ICMP_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Type",      UINT8),
  ("Code",      UINT8),
  ("Checksum",  UINT16),
  ]

class IP4_ICMP_ERROR_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Head",    IP4_ICMP_HEAD),
  ("Fourth",  UINT32),
  ("IpHead",  IP4_HEAD),
  ]

class IP4_ICMP_QUERY_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Head",  IP4_ICMP_HEAD),
  ("Id",    UINT16),
  ("Seq",   UINT16),
  ]

class IP6_ICMP_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Type",      UINT8),
  ("Code",      UINT8),
  ("Checksum",  UINT16),
  ]

class IP6_ICMP_ERROR_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Head",      IP6_ICMP_HEAD),
  ("Fourth",    UINT32),
  ("IpHead",    EFI_IP6_HEADER),
  ]

class IP6_ICMP_INFORMATION_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("Head",      IP6_ICMP_HEAD),
  ("Fourth",    UINT32),
  ]

class EFI_UDP_HEADER (Structure):
  _pack_   = 1
  _fields_ = [
  ("SrcPort",   UINT16),
  ("DstPort",   UINT16),
  ("Length",    UINT16),
  ("Checksum",  UINT16),
  ]

class TCP_HEAD (Structure):
  _pack_   = 1
  _fields_ = [
  ("SrcPort",   TCP_PORTNO),
  ("DstPort",   TCP_PORTNO),
  ("Seq",       TCP_SEQNO),
  ("Ack",       TCP_SEQNO),
  ("Res",       UINT8, 4),
  ("HeadLen",   UINT8, 4),
  ("Flag",      UINT8),
  ("Wnd",       UINT16),
  ("Checksum",  UINT16),
  ("Urg",       UINT16),
  ]

NETDEBUG_LEVEL_TRACE   = 5
NETDEBUG_LEVEL_WARNING = 4
NETDEBUG_LEVEL_ERROR   = 3

NET_SYSLOG_FACILITY    = 16
NET_SYSLOG_PACKET_LEN  = 512
NET_SYSLOG_TX_TIMEOUT  = (500 * 1000 * 10)
NET_DEBUG_MSG_LEN      = 470

NET_BUF_SIGNATURE    = SIGNATURE_32 ('n', 'b', 'u', 'f')
NET_VECTOR_SIGNATURE = SIGNATURE_32 ('n', 'v', 'e', 'c')
NET_QUE_SIGNATURE    = SIGNATURE_32 ('n', 'b', 'q', 'u')

NET_PROTO_DATA       = 64
NET_BUF_HEAD         = 1
NET_BUF_TAIL         = 0
NET_VECTOR_OWN_FIRST = 0x01

class NET_BLOCK (Structure):
  _fields_ = [
  ("Len",   UINT32),
  ("Bulk",  POINTER(UINT8)),
  ]

NET_VECTOR_EXT_FREE = CFUNCTYPE (
  VOID,
  PVOID,                         # *Arg
  )

class NET_VECTOR (Structure):
  _fields_ = [
  ("Signature", UINT32),
  ("RefCnt",    INTN),
  ("Free",      NET_VECTOR_EXT_FREE),
  ("Arg",       PVOID),
  ("Flag",      UINT32),
  ("Len",       UINT32),
  ("BlockNum",  UINT32),
  ("Block",     NET_BLOCK * 1),
  ]

class NET_BLOCK_OP (Structure):
  _fields_ = [
  ("BlockHead", POINTER(UINT8)),
  ("BlockTail", POINTER(UINT8)),
  ("Head",      POINTER(UINT8)),
  ("Tail",      POINTER(UINT8)),
  ("Size",      UINT32),
  ]

class NET_IP_HEAD (Union):
  _fields_ = [
  ("Ip4", POINTER(IP4_HEAD)),
  ("Ip6", POINTER(EFI_IP6_HEADER)),
  ]

class NET_BUF (Structure):
  _fields_ = [
  ("Signature",   UINT32),
  ("RefCnt",      INTN),
  ("List",        LIST_ENTRY),
  ("Ip",          NET_IP_HEAD),
  ("Tcp",         POINTER(TCP_HEAD)),
  ("Udp",         POINTER(EFI_UDP_HEADER)),
  ("ProtoData",   UINT8 * NET_PROTO_DATA),
  ("Vector",      POINTER(NET_VECTOR)),
  ("BlockOpNum",  UINT32),
  ("TotalSize",   UINT32),
  ("BlockOp",     NET_BLOCK_OP * 1),
  ]

class NET_BUF_QUEUE (Structure):
  _fields_ = [
  ("Signature", UINT32),
  ("RefCnt",    INTN),
  ("List",      LIST_ENTRY),
  ("BufList",   LIST_ENTRY),
  ("BufSize",   UINT32),
  ("BufNum",    UINT32),
  ]

class NET_PSEUDO_HDR (Structure):
  _pack_   = 1
  _fields_ = [
  ("SrcIp",     IP4_ADDR),
  ("DstIp",     IP4_ADDR),
  ("Reserved",  UINT8),
  ("Protocol",  UINT8),
  ("Len",       UINT16),
  ]

class NET_IP6_PSEUDO_HDR (Structure):
  _pack_   = 1
  _fields_ = [
  ("SrcIp",       EFI_IPv6_ADDRESS),
  ("DstIp",       EFI_IPv6_ADDRESS),
  ("Len",         UINT32),
  ("Reserved",    UINT32, 24),
  ("NextHeader",  UINT32, 8),
  ]

class NET_FRAGMENT (Structure):
  _fields_ = [
  ("Len",   UINT32),
  ("Bulk",  POINTER(UINT8)),
  ]

