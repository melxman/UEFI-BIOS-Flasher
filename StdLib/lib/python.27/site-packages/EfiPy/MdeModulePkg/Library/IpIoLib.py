# IpIoLib.py
#
# Copyright (C) 2017 efipy.core@gmail.com All rights reserved.
#
# IpIoLib.py is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# EfiPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from EfiPy  import *

from EfiPy.MdePkg.Protocol.Ip4 import EFI_IP4_COMPLETION_TOKEN, EFI_IP4_TRANSMIT_DATA, EFI_IP4_RECEIVE_DATA, EFI_IP4_OVERRIDE_DATA, EFI_IP4_CONFIG_DATA, EFI_IP4_HEADER, EFI_IP4_PROTOCOL
from EfiPy.MdePkg.Protocol.Ip6 import EFI_IP6_COMPLETION_TOKEN, EFI_IP6_TRANSMIT_DATA, EFI_IP6_RECEIVE_DATA, EFI_IP6_OVERRIDE_DATA, EFI_IP6_CONFIG_DATA, EFI_IP6_HEADER, EFI_IP6_PROTOCOL

from EfiPy.MdeModulePkg.Library.NetLib import IP4_ADDR, NET_BUF

ICMP_TYPE_UNREACH              = 3
ICMP_TYPE_TIMXCEED             = 11
ICMP_TYPE_PARAMPROB            = 12
ICMP_TYPE_SOURCEQUENCH         = 4

ICMP_CODE_UNREACH_NET          = 0
ICMP_CODE_UNREACH_HOST         = 1
ICMP_CODE_UNREACH_PROTOCOL     = 2
ICMP_CODE_UNREACH_PORT         = 3
ICMP_CODE_UNREACH_NEEDFRAG     = 4
ICMP_CODE_UNREACH_SRCFAIL      = 5
ICMP_CODE_UNREACH_NET_UNKNOWN  = 6
ICMP_CODE_UNREACH_HOST_UNKNOWN = 7
ICMP_CODE_UNREACH_ISOLATED     = 8
ICMP_CODE_UNREACH_NET_PROHIB   = 9
ICMP_CODE_UNREACH_HOST_PROHIB  = 10
ICMP_CODE_UNREACH_TOSNET       = 11
ICMP_CODE_UNREACH_TOSHOST      = 12

ICMP_ERR_UNREACH_NET           = 0
ICMP_ERR_UNREACH_HOST          = 1
ICMP_ERR_UNREACH_PROTOCOL      = 2
ICMP_ERR_UNREACH_PORT          = 3
ICMP_ERR_MSGSIZE               = 4
ICMP_ERR_UNREACH_SRCFAIL       = 5
ICMP_ERR_TIMXCEED_INTRANS      = 6
ICMP_ERR_TIMXCEED_REASS        = 7
ICMP_ERR_QUENCH                = 8
ICMP_ERR_PARAMPROB             = 9

ICMP6_ERR_UNREACH_NET          = 0
ICMP6_ERR_UNREACH_HOST         = 1
ICMP6_ERR_UNREACH_PROTOCOL     = 2
ICMP6_ERR_UNREACH_PORT         = 3
ICMP6_ERR_PACKAGE_TOOBIG       = 4
ICMP6_ERR_TIMXCEED_HOPLIMIT    = 5
ICMP6_ERR_TIMXCEED_REASS       = 6
ICMP6_ERR_PARAMPROB_HEADER     = 7
ICMP6_ERR_PARAMPROB_NEXHEADER  = 8
ICMP6_ERR_PARAMPROB_IPV6OPTION = 9

class ICMP_ERROR_INFO (Structure):
  _fields_ = [
  ("IsHard",  BOOLEAN),
  ("Notify",  BOOLEAN),
  ]

class IP_IO_IP_COMPLETION_TOKEN (Union):
  _fields_ = [
  ("Ip4Token",  EFI_IP4_COMPLETION_TOKEN),
  ("Ip6Token",  EFI_IP6_COMPLETION_TOKEN),
  ]

class IP_IO_IP_TX_DATA (Union):
  _fields_ = [
  ("Ip4TxData",  EFI_IP4_TRANSMIT_DATA),
  ("Ip6TxData",  EFI_IP6_TRANSMIT_DATA),
  ]

class IP_IO_IP_RX_DATA (Union):
  _fields_ = [
  ("Ip4RxData",  EFI_IP4_RECEIVE_DATA),
  ("Ip6RxData",  EFI_IP6_RECEIVE_DATA),
  ]

class IP_IO_OVERRIDE (Union):
  _fields_ = [
  ("Ip4OverrideData",  EFI_IP4_OVERRIDE_DATA),
  ("Ip6OverrideData",  EFI_IP6_OVERRIDE_DATA),
  ]

class IP_IO_IP_CONFIG_DATA (Union):
  _fields_ = [
  ("Ip4CfgData",  EFI_IP4_CONFIG_DATA),
  ("Ip6CfgData",  EFI_IP6_CONFIG_DATA),
  ]

class IP_IO_IP_HEADER (Union):
  _fields_ = [
  ("Ip4Hdr",  POINTER(EFI_IP4_HEADER)),
  ("Ip6Hdr",  POINTER(EFI_IP6_HEADER)),
  ]

class IP_IO_IP_MASK (Union):
  _fields_ = [
  ("SubnetMask",    IP4_ADDR),
  ("PrefixLength",  UINT8),
  ]

class IP_IO_IP_PROTOCOL (Union):
  _fields_ = [
  ("Ip4", POINTER(EFI_IP4_PROTOCOL)),
  ("Ip6", POINTER(EFI_IP4_PROTOCOL)),
  ]

class EFI_NET_SESSION_DATA (Structure):
  _fields_ = [
  ("Source",    EFI_IP_ADDRESS),
  ("Dest",      EFI_IP_ADDRESS),
  ("IpHdr",     IP_IO_IP_HEADER),
  ("IpHdrLen",  UINT32),
  ]

PKT_RCVD_NOTIFY = CFUNCTYPE (
  VOID,
  EFI_STATUS,                     #   IN Status, 
  UINT8,                          #   IN IcmpErr,
  POINTER(EFI_NET_SESSION_DATA),  #   IN *NetSession,
  POINTER(NET_BUF),               #   IN *Pkt,
  PVOID                           #   IN *Context
  )

PKT_SENT_NOTIFY = CFUNCTYPE (
  VOID,
  EFI_STATUS,         #   IN Status,
  PVOID,              #   IN *Context,
  IP_IO_IP_PROTOCOL,  #   IN Sender,
  PVOID               #   IN *NotifyData
  )

class IP_IO (Structure):
  _fields_ = [
  ("Entry",           LIST_ENTRY),
  ("IpList",          LIST_ENTRY),
  ("Controller",      EFI_HANDLE),
  ("Image",           EFI_HANDLE),
  ("ChildHandle",     EFI_HANDLE),
  ("Ip",              IP_IO_IP_PROTOCOL),
  ("IsConfigured",    BOOLEAN),
  ("Protocol",        UINT8),
  ("RcvToken",        IP_IO_IP_COMPLETION_TOKEN),
  ("PendingSndList",  LIST_ENTRY),
  ("RcvdContext",     PVOID),
  ("SndContext",      PVOID),
  ("PktRcvdNotify",   PKT_RCVD_NOTIFY),
  ("PktSentNotify",   PKT_SENT_NOTIFY),
  ("IpVersion",       UINT8),
  ("StationIp",       IP4_ADDR),
  ("SubnetMask",      IP4_ADDR),
  ]

class IP_IO_OPEN_DATA (Structure):
  _fields_ = [
  ("IpConfigData",  IP_IO_IP_CONFIG_DATA),
  ("RcvdContext",   PVOID),
  ("SndContext",    PVOID),
  ("PktRcvdNotify", PKT_RCVD_NOTIFY),
  ("PktSentNotify", PKT_SENT_NOTIFY),
  ]

class IP_IO_SEND_ENTRY (Structure):
  _fields_ = [
  ("Entry",       LIST_ENTRY),
  ("IpIo",        POINTER(IP_IO)),
  ("Context",     PVOID),
  ("NotifyData",  PVOID),
  ("Ip",          IP_IO_IP_PROTOCOL),
  ("Pkt",         POINTER(NET_BUF)),
  ("SndToken",    IP_IO_IP_COMPLETION_TOKEN),
  ]

class IP_IO_IP_INFO (Structure):
  _fields_ = [
  ("Addr",          EFI_IP_ADDRESS),
  ("PreMask",       IP_IO_IP_MASK),
  ("Entry",         LIST_ENTRY),
  ("ChildHandle",   EFI_HANDLE),
  ("Ip",            IP_IO_IP_PROTOCOL),
  ("DummyRcvToken", IP_IO_IP_COMPLETION_TOKEN),
  ("RefCnt",        INTN),
  ("IpVersion",     UINT8),
  ]

