# Tls.py
#
# Copyright (C) 2017 efipy.core@gmail.com All rights reserved.
#
# Tls.py is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2 of the License.
#
# EfiPy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EfiPy.  If not, see <http://www.gnu.org/licenses/>.
#

from EfiPy import *

class EFI_TLS_PROTOCOL (Structure):
  pass

EfiTlsVersion                 = 0
EfiTlsConnectionEnd           = 1
EfiTlsCipherList              = 2
EfiTlsCompressionMethod       = 3
EfiTlsExtensionData           = 4
EfiTlsVerifyMethod            = 5
EfiTlsSessionID               = 6
EfiTlsSessionState            = 7
EfiTlsClientRandom            = 8
EfiTlsServerRandom            = 9
EfiTlsKeyMaterial             = 10
EfiTlsSessionDataTypeMaximum  = 11
EFI_TLS_SESSION_DATA_TYPE     = UINTN

class EFI_TLS_VERSION (Structure):
  _fields_ = [
    ("Major",  UINT8),
    ("Minor",  UINT8),
    ]

EfiTlsClient  = 0
EfiTlsServer  = 1
EFI_TLS_CONNECTION_END  = UINTN

class EFI_TLS_CIPHER (Structure):
  _fields_ = [
    ("Data1",  UINT8),
    ("Data2",  UINT8),
    ]

EFI_TLS_COMPRESSION = UINT8

class EFI_TLS_EXTENSION (Structure):
  _fields_ = [
    ("ExtensionType", UINT16),
    ("Length",        UINT16),
    ("Data",          UINT8 * 1),
    ]

EFI_TLS_VERIFY  = UINT32

EFI_TLS_VERIFY_NONE                  = 0x0
EFI_TLS_VERIFY_PEER                  = 0x1
EFI_TLS_VERIFY_FAIL_IF_NO_PEER_CERT  = 0x2
EFI_TLS_VERIFY_CLIENT_ONCE           = 0x4

class EFI_TLS_RANDOM (Structure):
  _fields_ = [
    ("GmtUnixTime", UINT16),
    ("RandomBytes", UINT8 * 28),
    ]

class EFI_TLS_MASTER_SECRET (Structure):
  _fields_ = [
    ("Data",  UINT8 * 48),
    ]

MAX_TLS_SESSION_ID_LENGTH  = 32

class EFI_TLS_SESSION_ID (Structure):
  _fields_ = [
    ("Length",  UINT16),
    ("Data",    UINT8 * MAX_TLS_SESSION_ID_LENGTH),
    ]

EfiTlsSessionNotStarted       = 0
EfiTlsSessionHandShaking      = 1
EfiTlsSessionDataTransferring = 2
EfiTlsSessionClosing          = 3
EfiTlsSessionError            = 4
EfiTlsSessionStateMaximum     = 5
EFI_TLS_SESSION_STATE         = UINTN

class EFI_TLS_FRAGMENT_DATA (Structure):
  _fields_ = [
    ("FragmentLength",  UINT32),
    ("FragmentBuffer",  PVOID),
    ]

EfiTlsEncrypt   = 0
EfiTlsDecrypt   = 1
EFI_TLS_CRYPT_MODE  = UINTN

EFI_TLS_SET_SESSION_DATA = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EFI_TLS_PROTOCOL),      #   IN *This,
  EFI_TLS_SESSION_DATA_TYPE,      #   IN DataType,
  PVOID,                          #   IN *Data,
  UINTN                           #   IN DataSize
  )

EFI_TLS_GET_SESSION_DATA = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EFI_TLS_PROTOCOL),  #   IN     *This,
  EFI_TLS_SESSION_DATA_TYPE,  #   IN     DataType,
  PVOID,                      #   IN OUT *Data,  OPTIONAL
  POINTER(UINTN)              #   IN OUT *DataSize
  )

EFI_TLS_BUILD_RESPONSE_PACKET = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EFI_TLS_PROTOCOL),     #   IN     *This,
  POINTER(UINT8),                #   IN     *RequestBuffer, OPTIONAL
  UINTN,                         #   IN     RequestSize, OPTIONAL
  POINTER(UINT8),                #   OUT    *Buffer, OPTIONAL
  POINTER(UINTN)                 #   IN OUT *BufferSize
  )

EFI_TLS_PROCESS_PACKET = CFUNCTYPE (
  EFI_STATUS,
  POINTER(EFI_TLS_PROTOCOL),          #   IN      *This,
  POINTER(EFI_TLS_FRAGMENT_DATA),     #   IN OUT  **FragmentTable,
  POINTER(UINT32),                    #   IN      *FragmentCount,
  EFI_TLS_CRYPT_MODE                  #   IN      CryptMode
  )

EFI_TLS_PROTOCOL._fields_ = [
  ("SetSessionData",      EFI_TLS_SET_SESSION_DATA),
  ("GetSessionData",      EFI_TLS_GET_SESSION_DATA),
  ("BuildResponsePacket", EFI_TLS_BUILD_RESPONSE_PACKET),
  ("ProcessPacket",       EFI_TLS_PROCESS_PACKET),
  ]

gEfiTlsServiceBindingProtocolGuid = EFI_GUID(0x952cb795, 0xff36, 0x48cf, (0xa2, 0x49, 0x4d, 0xf4, 0x86, 0xd6, 0xab, 0x8d))
gEfiTlsProtocolGuid = EFI_GUID(0xca959f, 0x6cfa, 0x4db1, (0x95, 0xbc, 0xe4, 0x6c, 0x47, 0x51, 0x43, 0x90))

